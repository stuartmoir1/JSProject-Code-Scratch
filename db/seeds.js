use main

db.data.drop();

db.data.insert([
  {
    "name": "abstraction",
    "description": "Using abstraction, a programmer hides all but the relevant data about an object in order to reduce complexity and increase efficiency.",
    "keywords": ["programmer", "object", "efficiency"],
    "testDescription": ["Using abstraction, a ", " hides all but the relevant data about an ", " in order to reduce complexity and increase ", "."],
    "image": "",
    "tags": ["object", "object-oriented propgramming", "variable"],
    "add_info": "Abstraction is one of the four fundamental object-oriented propgramming concepts. The other three are inheritance, polymorphism, and encapsulation.  Abstraction is a technique for arranging complexity of computer systems. It works by establishing a level of complexity on which a person interacts with the system, suppressing the more complex details below the current level. The programmer works with an idealized interface (usually well defined) and can add additional levels of functionality that would otherwise be too complex to handle.",
    "webpages": [
      {"What is abstraction? (TechTarget)": "http://whatis.techtarget.com/definition/abstraction"},
      {"What is abstraction? (StackOverflow)": "https://stackoverflow.com/questions/7028242/what-is-abstraction"},
      {"Abstraction (Wikipedia)": "https://en.wikipedia.org/wiki/Abstraction_(software_engineering)"}
    ],
    "videos": [
      {"Abstraction (Harvard University)": "https://www.youtube.com/watch?v=6V1sr0XV_Ng"},
      {"Abstraction (University of Alabama)": "https://www.youtube.com/watch?v=HJ6rX5qBPIc"}
    ],
     "embed_video": "https://www.youtube.com/embed/v2ogKZWkkFg",
     "audio": "http://audio.oxforddictionaries.com/en/mp3/abstraction_gb_1_8.mp3"

  },

  {
    "name": "array",
    "description": "A data structure that contains a group of elements, which may or may not be all of the same data type",
    "keywords": ["elements", "data"],
    "testDescription": ["A data structure that contains a group of ", ", which may or may not be all of the same ", " type"],
    "tags": ["variable", "string", "integer"],
    "add_info": "An array, is a data structure consisting of a collection of elements (values or variables), each identified by at least one array index or key. An array is stored so that the position of each element can be computed from its index tuple by a mathematical formula.",
    "webpages": [
      {"Array definition (TechTarget)": "https://techterms.com/definition/array"},
      {"Array (StackOverflow)": "https://stackoverflow.com/documentation/java/99/arrays#t=201709192017060243788"},
      {"Array (Wikipedia)": "https://en.wikipedia.org/wiki/Array_data_structure"}
    ],
    "videos": [
      {"Array - Java (Patrick Washington DC)": "https://www.youtube.com/watch?v=7VWPiKoia8o"},
      {"Array - Ruby (Educator)": "https://www.youtube.com/watch?v=REDH9OzdQ_I"}
    ],
     "embed_video": "https://www.youtube.com/embed/Zj_UC7c1nh4",
     "audio": "http://audio.oxforddictionaries.com/en/mp3/array_gb_1.mp3"
  },

  {
    "name": "casting",
    "description": "Casting takes an object of one particular type and turns it into another object type.",
    "keywords": ["object", "object"],
    "testDescription": ["Casting takes an ", " of one particular type and turns it into another ", " type."],
    "tags": ["object", "Java"],
    "add_info": "Casting is a way of changing an entity of one data type into another. An example would be the conversion of an integer value into a floating point value or its textual representation as a string, and vice versa.  It can also be used with changing an object to another object allowing you to call methods on the converted object type.",
    "webpages": [
      {"Type casting (Studytonight": "http://www.studytonight.com/java/type-casting-in-java"},
      {"Type conversion (Wikipedia)": "https://en.wikipedia.org/wiki/Type_conversion#C-like_languages"}
    ],
    "videos": [
      {"Casting and constants (Joe Hass)": "https://www.youtube.com/watch?v=00oyrMoKpKc"},
      {"Variables, ints and doubles casting (AP Computer Science)": "https://www.youtube.com/watch?v=BPEaPjHtTxE"}
    ],
     "embed_video": "https://www.youtube.com/embed/G0q78w5dmcE",
     "audio": "http://audio.oxforddictionaries.com/en/mp3/casting_gb_1.mp3"
  },

  {
    "name": "class",
    "description": "A class serves as a template for creating, or instantiating, specific objects within a program.",
    "keywords": [ "objects"],
    "testDescription": ["A class serves as a template for creating, or instantiating, specific ", " within a program."],
    "image": "",
    "tags": ["object-oriented programming", "object", "properties", "method", "object"],
    "add_info": "In many languages, the class name is used as the name for the class (the template itself), the name for the default constructor of the class (a subroutine that creates objects), and as the type of objects generated by instantiating the class; these distinct concepts are easily conflated. When an object is created by a constructor of the class, the resulting object is called an instance of the class, and the member variables specific to the object are called instance variables, to contrast with the class variables shared across the class.",
    "webpages": [
      {"What is a class (Guy Hass)": "http://guyhaas.com/bfoit/itp/JavaClass.html"},
      {"Class (Wikipedia)": "https://en.wikipedia.org/wiki/Class_(computer_programming)"}
    ],
    "videos": [
      {"Classes and objects (Open Canvas)": "https://www.youtube.com/watch?v=POrU7vcKB_k"}
    ],
    "embed_video": "https://www.youtube.com/embed/BZ8r7pC9bHY",
    "audio": "http://audio.oxforddictionaries.com/en/mp3/class_gb_1.mp3"
  },

  {
    "name": "encapsulation",
    "description": "Encapsulation in Java is a mechanism of wrapping the variables and the methods together as a single unit.",
    "keywords": ["variables", "methods"],
    "testDescription": ["Encapsulation in Java is a mechanism of wrapping the ", " and the ", " together as a single unit."],
    "tags": ["inheritance", "polymorphism", "abstraction", "Java"],
    "add_info": "Encapsulation is one of the four fundamental object-oriented programming concepts. The other three are inheritance, polymorphism, and abstraction. In encapsulation, the variables of a class will be hidden from other classes, and can be accessed only through the methods of their current class.",
    "webpages": [
      {"Encapsulation in Java (beginnersbook)": "https://beginnersbook.com/2013/05/encapsulation-in-java/"},
      {"Encapsulation concept (StackOverflow)": "https://stackoverflow.com/questions/4772956/encapsulation-concept"},
      {"Encapsulation (Wikipedia)": "https://en.wikipedia.org/wiki/Encapsulation_(computer_programming)"}
    ],
    "videos": [
      {"Java for beginners tutorial encapsulation (datanotfound)": "https://www.youtube.com/watch?v=JQ8CuedDchw"},
      {"What is encapsulation in Java (Telusko Learnings)": "https://www.youtube.com/watch?v=tt_astMjep0"}
    ],
     "embed_video": "https://www.youtube.com/embed/szYzBC89CPE",
     "audio": "http://audio.oxforddictionaries.com/en/mp3/encapsulation_gb_1.mp3"
  },

  {
    "name": "hash",
    "description": "A dictionary-like collection of unique keys and their values.",
    "keywords": ["keys", "values"],
    "testDescription": ["A dictionary-like collection of unique ", " and their ", "."],
    "tags": ["Ruby", "variable"],
    "add_info": "A collection of key-value pairs like this: 'employee' => 'salary'. It is similar to an Array, except that indexing is done via arbitrary keys of any object type, not an integer index.  The order in which you traverse a hash by either key or value may seem arbitrary and will generally not be in the insertion order. If you attempt to access a hash with a key that does not exist, the method will return nil.",
    "webpages": [
      {"Hash - Ruby (rubylearning)": "http://rubylearning.com/satishtalim/ruby_hashes.html"},
      {"Hash syntax in Ruby (StackOverflow)": "https://stackoverflow.com/questions/4563766/hash-syntax-in-ruby"}
    ],
    "videos": [
      {"How to write a hash (Wild Accademy)": "https://www.youtube.com/watch?v=3tSPTv27QcY"},
      {"Ruby data structures - hashes (Ruby Udacity)": "https://www.youtube.com/watch?v=QOytrJL4c2c"}
    ],
     "embed_video": "https://www.youtube.com/embed/SYMM9qNOXg8",
     "audio": "http://audio.oxforddictionaries.com/en/mp3/hash_gb_1.mp3"
  },

  {
    "name": "inheritance",
    "description": "In object-oriented programming, inheritance enables new objects to take on the properties of existing objects.",
    "keywords": ["object-oriented", "objects", "properties"],
    "testDescription": ["In ", " programming, inheritance enables new ", " to take on the ", " of existing objects."],
    "tags": ["object-oriented programming", "object", "properties", "encapsulation", "polymorphism", "abstraction"],
    "add_info": "Inheritance is one of the four fundamental OOP concepts. The other three are encapsulation, polymorphism, and abstraction. A class that is used as the basis for inheritance is called a superclass or base class. A class that inherits from a superclass is called a subclass or derived class. The terms parent class and child class are also acceptable terms to use respectively. A child inherits visible properties and methods from its parent while adding additional properties and methods of its own.",
    "webpages": [
      {"What is inheritance (techtarget)": "http://whatis.techtarget.com/definition/inheritance"},
      {"Difference between inheritance and polymorphism? (StackOverflow)": "https://stackoverflow.com/questions/6308178/what-is-the-main-difference-between-inheritance-and-polymorphism"},
      {"Inheritance (Wikipedia)": "https://en.wikipedia.org/wiki/Inheritance_(object-oriented_programming)"}
    ],
    "videos": [
      {"What is inheritance in Java (Telusko Learnings)": "https://www.youtube.com/watch?v=aFZ-0bbSLi8&t=111s"},
      {"Inheritance in Java (Programming Knowledge)": "https://www.youtube.com/watch?v=lz1Cx6GzOuc"}
    ],
     "embed_video": "https://www.youtube.com/embed/0PPKccntohM",
     "audio": "http://audio.oxforddictionaries.com/en/mp3/inheritance_gb_1.mp3"
  },

  {
    "name": "interface",
    "description": "A collection of abstract methods. A class implements an interface, thereby inheriting the abstract methods of the interface.",
    "keywords": ["methods", "class", "abstract"],
    "testDescription": ["A collection of abstract ", ". A ", " implements an interface, thereby inheriting the ", " methods of the interface."],
    "tags": ["method", "class", "Java"],
    "add_info": "An interface can be thought of as a blueprint of a class. Interfaces cannot be instantiated, but rather are implemented. A class that implements an interface must implement all of the methods described in the interface, or be an abstract class.",
    "webpages": [
      {"Interface in Java (javatpoint)": "https://www.javatpoint.com/interface-in-java"},
      {"What is an interface in Java (StackOverflow)": "https://stackoverflow.com/questions/1321122/what-is-an-interface-in-java"},
      {"Interface (Wikipedia)": "https://en.wikipedia.org/wiki/Interface_(Java)"}
    ],
    "videos": [
      {"Interface in Java (Navin Reddy)": "https://www.youtube.com/watch?v=Yaa3QroWe7Q"},
      {"Java interfaces (Programming Knowledge)": "https://www.youtube.com/watch?v=HxmP7ZVUeGU"}
    ],
     "embed_video": "https://www.youtube.com/embed/NnZQ-C0x4hs",
     "audio": "http://audio.oxforddictionaries.com/en/mp3/interface_gb_1.mp3"
  },

  {
    "name": "method",
    "description": "An action that an object is able to perform.",
    "keywords": ["action", "object"],
    "testDescription": ["An ", " that an ", " is able to perform."],
    "tags": ["function", "class", "object"],
    "add_info": "A method defines the behaviour of the objects that are created from the class. Consider the example of an object of the type 'person,' created using the person class. Methods associated with this class could consist of things like walking and driving. Methods are sometimes confused with functions, but they are distinct.",
    "webpages": [
      {"Method (Wikipedia)": "https://en.wikipedia.org/wiki/Method_(computer_programming)"},
      {"Why methods (Codecademy)": "https://www.codecademy.com/courses/learn-ruby/lessons/methods-blocks-sorting/exercises/why-methods?action=lesson_resume"}
    ],
    "videos": [
      {"Methods (Udacity)": "https://www.youtube.com/watch?v=_rsKeFaGx48"}
    ],
    "embed_video": "https://www.youtube.com/embed/1OZrWqVncsU",
    "audio": "http://audio.oxforddictionaries.com/en/mp3/method_gb_1.mp3"
  },

  {
    "name": "object",
    "description": "A self-contained component that contains properties and methods needed to make a certain type of data useful.",
    "keywords": ["properties", "methods"],
    "testDescription": ["A self-contained component that contains ", " and ", " needed to make a certain type of data useful."],
    "tags": ["object-oriented programming", "class"],
    "add_info": "Software objects are conceptually similar to real-world objects: an object’s properties are what it knows and its methods are what it can do. They too consist of state and related behavior. An object stores its state in properties and exposes its behaviour through methods. Methods operate on an object's internal state and serve as the primary mechanism for object-to-object communication. Hiding internal state and requiring all interaction to be performed through an object's methods is known as data encapsulation — a fundamental principle of object-oriented programming.",
    "webpages": [
      {"Object (Wikipedia)": "https://en.wikipedia.org/wiki/Object_(computer_science)"},
      {"Object (Oracle)": "http://docs.oracle.com/javase/tutorial/java/concepts/object.html"},
      {"Why classes (Codecademy)": "https://www.codecademy.com/courses/learn-ruby/lessons/object-oriented-programming-i/exercises/why-classes?action=lesson_resume"}
    ],
    "videos": [
      {"What is an object? (java breakpoint)": "https://www.youtube.com/watch?v=1OZrWqVncsU"}
    ],
    "embed_video": "https://www.youtube.com/embed/1OZrWqVncsU",
    "audio": "http://audio.oxforddictionaries.com/en/mp3/object_gb_1.mp3"
  },

  {
    "name": "overload",
    "description": "The ability to define more than one method with the same name in a class.",
    "keywords": ["method", "class"],
    "testDescription": ["The ability to define more than one ", " with the same name in a ", "."],
    "tags": ["method", "class", "overriding"],
    "add_info": "Function overloading or method overloading is the ability to create multiple methods of the same name with different implementations. Calls to an overloaded function will run a specific implementation of that function appropriate to the context of the call, allowing one function call to perform different tasks depending on context.",
    "webpages": [
      {"Method overloading (tutorialspoint)": "https://www.tutorialspoint.com/javaexamples/method_overloading.htm"},
      {"Constructor overloading in Java (StackOverflow)": "https://stackoverflow.com/questions/1182153/constructor-overloading-in-java-best-practice"},
      {"Function overloading (Wikipedia)": "https://en.wikipedia.org/wiki/Function_overloading"}
    ],
    "videos": [
      {"Method overloading in Java (programmingKnowledge)": "https://www.youtube.com/watch?v=pBe4hLdrMHA"},
      {"Difference between overloading and overriding (Durga Education)": "https://www.youtube.com/watch?v=4HJUX_BQgGI"}
    ],
     "embed_video": "https://www.youtube.com/embed/hGRSyIvoIT4",
     "audio": "http://audio.oxforddictionaries.com/en/mp3/overload_gb_1.mp3"
  },

  {
    "name": "override",
    "description": "Enables a child class to provide a different implementation for a method that is already defined and/or implemented in its parent class or one of its parent classes.",
    "keywords": ["child", "method", "parent", "parent"],
    "testDescription": ["Enables a ", " class to provide a different implementation for a ", " that is already defined and/or implemented in its ", " class or one of its ", " classes."],
    "tags": ["class", "method", "overloading"],
    "add_info": "Overriding allows a subclass or child class to provide a specific implementation of a method that is already provided by one of its superclasses or parent classes. The implementation in the subclass overrides (replaces) the implementation in the superclass by providing a method that has same name, same parameters or signature, and same return type as the method in the parent class.",
    "webpages": [
      {"Overriding Java (tutorialspoint)": "https://www.tutorialspoint.com/java/java_overriding.htm"},
      {"Overriding in Java (StackOverflow)": "https://stackoverflow.com/questions/8813599/overriding-in-java"},
      {"Method overriding (Wikipedia)": "https://en.wikipedia.org/wiki/Method_overriding"}
    ],
    "videos": [
      {"Method overriding in Java (programmingKnowledge)": "https://www.youtube.com/watch?v=rVSlCg2ttZ0"},
      {"Difference between overloading and overriding (Durga Education)": "https://www.youtube.com/watch?v=4HJUX_BQgGI"}
    ],
     "embed_video": "https://www.youtube.com/embed/ouI9Qarbbik",
     "audio": "http://audio.oxforddictionaries.com/en/mp3/override_gb_1_8.mp3"
  },

  {
    "name": "polymorphism",
    "description": "In object-orientated programming, the ability of an object to take on many forms.",
    "keywords": ["object", "object-orientated programming"],
    "testDescription": ["object"],
    "tags": ["object", "object-orientated programming"],
    "add_info": "Polymorphism is one of the four fundamental object-orientated programming concepts. The other three are encapsulation, inheritance and abstraction. It's the characteristic of being able to assign a different meaning or usage to something in different contexts - specifically, to allow an entity such as a variable, a function, or an object to have more than one form. There are several different kinds of polymorphism, including ad hoc polymorphism, parametric polymorphism and subtyping.",
    "webpages": [
      {"Polymorphism (Wikipedia)": "https://en.wikipedia.org/wiki/Polymorphism_(computer_science)"},
      {"Polymorphism in Java (beginnersbook)": "https://beginnersbook.com/2013/03/polymorphism-in-java/"},
      {"What is Polymorphism in Java? (Developer)": "http://www.developer.com/java/data/what-is-polymorphism-in-java.html"}
    ],
    "videos": [
      {"Introduction to polymorphism (thenewboston)": "https://www.youtube.com/watch?v=0xw06loTm1k"},
      {"Introduction to Polymorphism (shiffman)": "https://vimeo.com/60187931"}
    ],
     "embed_video": "https://www.youtube.com/embed/0xw06loTm1k",
     "audio": "http://audio.oxforddictionaries.com/en/mp3/polymorphism_gb_1_8.mp3"
  },
  
  {
    "name": "property",
    "description": "A variable declared within a class.",
    "keywords": ["variable", "class"],
    "testDescription": ["A ", " declared within a ", "."],
    "tags": ["object-oriented programming", "class"],
    "add_info": "A property, in some object-oriented programming languages, is a special sort of class member, intermediate in functionality between a field (or data member) and a method. The syntax for reading and writing of properties is like for fields, but property reads and writes are (usually) translated to 'getter' and 'setter' method calls. The field-like syntax is easier to read and write than lots of method calls, yet the interposition of method calls 'under the hood' allows for data validation, active updating (e.g., of GUI elements), or implementation of what may be called 'read-only fields'.",
    "webpages": [
      {"What is Method, Property and Function? (StackOverflow)": "https://stackoverflow.com/questions/4246883/what-is-method-property-and-function"},
      {"Property (Wikipedia)": "https://en.wikipedia.org/wiki/Property_(programming)"}
    ],
    "videos": [
      {"VUnderstanding OOP Classes, Objects, Methods and Properties (Gary Bennett)": "https://www.youtube.com/watch?v=9FQ4zqfsYbQ"},
      {"Object Oriented Programming Concepts (BBarters)": "https://www.youtube.com/watch?v=5SWKbS87p98"}
    ],
    "embed_video": "https://www.youtube.com/embed/3bMsY5a7cBo",
    "audio": "http://audio.oxforddictionaries.com/en/mp3/property_gb_1.mp3"
  },

  {
    "name": "variable",
    "description": "A named piece of computer memory, containing some information inside.",
    "keywords": ["memory", "information"],
    "testDescription": ["A named piece of computer ", ", containing some ", " inside."],
    "tags": ["object-oriented programming", "array", "integer"],
    "add_info": "A variable is a storage location paired with an associated symbolic name (an identifier), which contains some known or unknown quantity of information referred to as a value. The variable name is the usual way to reference the stored value; this separation of name and content allows the name to be used independently of the exact information it represents. The identifier in computer source code can be bound to a value during run time, and the value of the variable may thus change during the course of program execution.",
    "webpages": [
      {"What is a variable? (LaunchSchool)": "https://launchschool.com/books/ruby/read/variables"},
      {"What is a variable? (StackOverflow)": "https://stackoverflow.com/questions/1137158/what-is-a-variable"},
      {"Variable (Wikipedia)": "https://en.wikipedia.org/wiki/Variable_(computer_science)"}
    ],
    "videos": [
      {"Variables, arrays, strings and length (ExplainTechnology)": "https://www.youtube.com/watch?v=aeoGGabJhAQ"}
    ],
    "embed_video": "https://www.youtube.com/embed/t4ND-_kTxcI",
    "audio": "http://audio.oxforddictionaries.com/en/mp3/variable_gb_1_8.mp3"
  }

  // {
  //   "name": "",
  //   "description": "",
  //   "keywords": ["", ""],
  //   "testDescription": [" ", "", ""],
  //   "tags": ["", "", ""],
  //   "add_info": "",
  //   "webpages": [
  //     {"What is a variable": ""},
  //     {"Variable in StackOverflow": ""},
  //     {"Wikipedia (variable)": ""}
  //   ],
  //   "videos": [
  //     {"Video discussing variables": ""},
  //     {"Programming fundamentals - variables": ""}
  //   ],
  //    "embed_video": "",
  //    "audio": "./client/build/audio/"
  // }
]);
